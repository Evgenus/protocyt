% for message in this.messages_order:
${this.messages[message].render_structure(state)}
% endfor

% from 'common.pytempl' import message_extra_args with context

class ${this.fullname}(BaseMessage):
    #__slots__ = ${repr(tuple(this.fields_by_name))}
    _extended_fields_ = ${repr(set(this.extended_fields))}
% for number, field in this.fields_optional:
% if field.get_default_value(state) != None:
    ${field.name[0].lower()+field.name[1:]} = ${field.get_default_value(state)}
% endif
% endfor

    def __init__(self,
% for number, field in this.fields_required:
        ${field.name[0].lower()+field.name[1:]}, # ${''.join(field.pretty(state))}
% endfor
% for number, field in this.fields_repeated:
        ${field.name[0].lower()+field.name[1:]}=None, # ${''.join(field.pretty(state))}
% endfor
% for number, field in this.fields_optional:
        ${field.name[0].lower()+field.name[1:]}=${field.get_default_value(state)}, # ${''.join(field.pretty(state))}
% endfor
        ):
% for index, field in this.fields_required:
        self.${field.name[0].lower()+field.name[1:]} = ${field.name[0].lower()+field.name[1:]}
% endfor
% for index, field in this.fields_repeated:
        if ${field.name[0].lower()+field.name[1:]} is None:
            self.${field.name[0].lower()+field.name[1:]} = []
        else:
            self.${field.name[0].lower()+field.name[1:]} = ${field.name[0].lower()+field.name[1:]}
% endfor
% for number, field in this.fields_optional:
        if ${field.name[0].lower()+field.name[1:]} != ${field.get_default_value(state)}:
            self.${field.name[0].lower()+field.name[1:]} = ${field.name[0].lower()+field.name[1:]}
% endfor
        pass

    def serialize(self, array):
        serialize_${this.fullname}(array, self)

    def dumps(self):
        array = bytearray()
        serialize_${this.fullname}(array, self)
        return array

    def deserialize(cls, array, ${message_extra_args(state)}):
        return wrapped_deserialize_${this.fullname}(array, ${message_extra_args(state)})
    deserialize = classmethod(deserialize)

    def loads(cls, array, ${message_extra_args(state)}):
        return wrapped_deserialize_${this.fullname}(array, ${message_extra_args(state)})
    loads = classmethod(loads)

    def __eq__(self, other_msg):
        return (isinstance(other_msg, ${this.fullname})
% for index, field in this.fields_required:
            and self.${field.name[0].lower()+field.name[1:]} == other_msg.${field.name[0].lower()+field.name[1:]}
% endfor
% for index, field in this.fields_repeated:
            and self.${field.name[0].lower()+field.name[1:]} == other_msg.${field.name[0].lower()+field.name[1:]}
% endfor
% for number, field in this.fields_optional:
            and getattr(self, "${field.name[0].lower()+field.name[1:]}", ${field.get_default_value(state)}) == getattr(other_msg, "${field.name[0].lower()+field.name[1:]}", ${field.get_default_value(state)})
% endfor
            )

    def __getstate__(self):
        positional = (
% for index, field in this.fields_required:
            self.${field.name[0].lower()+field.name[1:]},
% endfor
% for index, field in this.fields_repeated:
            self.${field.name[0].lower()+field.name[1:]},
% endfor
            )
        optional = {}
% for number, field in this.fields_optional:
        if hasattr(self, "${field.name[0].lower()+field.name[1:]}"):
            optional["${field.name[0].lower()+field.name[1:]}"] = self.${field.name[0].lower()+field.name[1:]}
% endfor
        return positional, optional

    def __setstate__(self, state):
        self.__init__(*state[0], **state[1])

% for name, message in this.messages.items():
    ${name} = ${message.fullname}
% endfor

${this.fullname}.DecodeError = DecodeError
${this.fullname}.EncodeError = EncodeError
