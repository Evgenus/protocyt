% for name, value in this.properties.iteritems():
# ${name}: ${value}
% endfor

<%macro make_repeatable(name)>
cdef object repeat_${name}(char **pointer, char *end):
    cdef object value = []
    while pointer[0]<end:
        value.append(${name}(pointer, end))
    return value
<%endmacro>

from python cimport *

${this.title('_', 'EXTERNALS')}

cdef extern from "Python.h":
    bint PyByteArray_Check(object o)
    bint PyByteArray_CheckExact(object o)
    object PyByteArray_FromObject(object o)
    object PyByteArray_FromStringAndSize(char *string, Py_ssize_t len)
    object PyByteArray_Concat(object a, object b)
    Py_ssize_t PyByteArray_Size(object bytearray)
    char* PyByteArray_AsString(object bytearray)
    bint PyByteArray_Resize(object bytearray, Py_ssize_t len)
    char* PyByteArray_AS_STRING(object bytearray)
    Py_ssize_t PyByteArray_GET_SIZE(object bytearray)
    PyObject* _PyObject_New(PyTypeObject *type)
    PyObject* PyTuple_Pack(Py_ssize_t n, ...)

cdef extern from "string.h":
    cdef int strlen(char* s) nogil
    cdef void* memcpy(void* dest, void* src, size_t len) nogil
    cdef void* memset(void* s, int c, size_t len) nogil

cdef extern from "stdlib.h":
    cdef void* malloc(size_t size) nogil
    cdef void* calloc(size_t nmb, size_t size) nogil
    cdef void* realloc(void* ptr, size_t size) nogil
    cdef void  free(void* ptr) nogil

cdef extern from "stdint.h":
    ctypedef unsigned long long int uint64_t
    ctypedef long long int int64_t
    ctypedef unsigned long int uint32_t
    ctypedef long int int32_t

cdef extern from "Python.h":
    object PyString_FromStringAndSize(char *v, size_t len)
    int PyString_AsStringAndSize(
        object obj, char **buffer, Py_ssize_t* length) except -1

#compatibility with python3

${this.title('_', 'HELPERS')}

try:
    bytes
except:
    bytes = str

class EncodeError(Exception):
    pass

class DecodeError(Exception):
    pass

class Extensions(object):
    __slots__ = 'host',
    def __init__(self, host):
        object.__setattr__(self, 'host', host)
    def __getattr__(self, name):
        if not self.__check_name(name):
            raise AttributeError(name)
        return getattr(self.host, name)
    def __setattr__(self, name, value):
        if not self.__check_name(name):
            raise AttributeError(name)
        setattr(self.host, name, value)
    def __getitem__(self, name):
        if not self.__check_name(name):
            raise KeyError(name)
        return getattr(self.host, name)
    def __setitem__(self, name, value):
        if not self.__check_name(name):
            raise KeyError(name)
        try:
            setattr(self.host, name, value)
        except AttributeError:
            raise KeyError(name)
    def __check_name(self, name):
        return name in self.host._extended_fields_

class BaseMessage(object):
    def SerializePartialToString(self):
        array = bytearray()
        self.serialize(array)
        return str(array)

    def ClearExtension(self, name):
        self._extended_fields_.remove(name)

    def HasExtension(self, name):
        return name in self._extended_fields_

    def HasField(self, name):
        return hasattr(self, name)

    def ClearField(self, name):
        delattr(self, name)

    def __ne__(self, other_msg):
        return not self==other_msg

    @property
    def Extensions(self):
        return Extensions(self)

    def __repr__(self):
        fields = ''
        for name in self.__slots__:
            fields += '{0}={1!r}'.format(name, getattr(self, name, '-?-'))
        return '<{0} {1} at 0x{2:08x}>'.format(
            self.__class__.__name__, fields, id(self))

${this.title('_', 'LOW LEVEL')}

ctypedef object(*parsefunc)(char **pointer, char *end)

${this.title(' ', 'uint32')}

cdef inline serialize_uint32(object array, uint32_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 10)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    if 0!=n:
        while True:
            #get the lowest 7 bits
            rem = <char>(n&((1<<7)-1))
            #shift 7 bits to the left
            n = n>>7
            if 0==n:
                #reached the end
                #signal no need to continue with 0 msb
                buff[0] = <char> rem
                buff+=1
                break
            else:
                rem = rem | (1<<7)
                buff[0] = <char> rem
                buff+=1
    else:
        buff[0] = '\0'
        buff+=1
    PyByteArray_Resize(array, buff - PyByteArray_AS_STRING(array))

cdef inline uint32_t raw_deserialize_uint32(char **start, char *end):
    cdef uint32_t value = 0
    cdef char byte
    cdef char *pointer = start[0]
    cdef int counter = 0
    while True:
        byte = pointer[0]
        value |= (byte & 0x7f) << counter
        counter+=7
        pointer+=1
        if byte & 0x80 == 0:
            break
        if pointer == end:
            raise DecodeError()
    start[0] = pointer
    return value

cdef object deserialize_uint32(char **pointer, char *end):
    return PyInt_FromLong(raw_deserialize_uint32(pointer, end))
${make_repeatable('deserialize_uint32')}




${this.title(' ', 'int32')}

cdef inline serialize_int32(object array, int32_t n):
    serialize_uint32(array, <uint32_t>n)

cdef object deserialize_int32(char **pointer, char *end):
    return PyInt_FromLong(<int32_t>raw_deserialize_uint32(pointer, end))
${make_repeatable('deserialize_int32')}




${this.title(' ', 'sint32')}

cdef inline serialize_sint32(object array, int32_t n):
    cdef uint32_t un = (n<<1) ^ (n>>31)
    serialize_uint32(array, un)

cdef object deserialize_sint32(char **pointer, char *end):
    cdef uint32_t un = raw_deserialize_uint32(pointer, end)
    return PyInt_FromLong(<int32_t>((un>>1) ^ (un<<31)))
${make_repeatable('deserialize_sint32')}




${this.title(' ', 'uint64')}

cdef inline serialize_uint64(object array, uint64_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 20)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    if 0!=n:
        while( True):
            #get the lowest 7 bits
            rem = <char>(n&((1<<7)-1))
            #shift 7 bits to the left
            n = n>>7
            if 0==n:
                #reached the end
                #signal no need to continue with 0 msb
                buff[0] = <char> rem
                buff+=1
                break
            else:
                rem = rem | (1<<7)
                buff[0] = <char> rem
                buff+=1
    else:
        buff[0] = '\0'
        buff+=1
    PyByteArray_Resize(array, buff - PyByteArray_AS_STRING(array))

cdef inline uint64_t raw_deserialize_uint64(char **start, char *end):
    cdef uint64_t value = 0
    cdef char byte
    cdef char *pointer = start[0]
    cdef int counter = 0
    while True:
        byte = pointer[0]
        value |= (byte & 0x7f) << counter
        counter+=7
        pointer+=1
        if byte & 0x80 == 0:
            break
        if pointer == end:
            raise DecodeError()
    start[0] = pointer
    return value

cdef object deserialize_uint64(char **pointer, char *end):
    return PyLong_FromLongLong(raw_deserialize_uint64(pointer, end))

${this.title(' ', 'int64')}

cdef inline serialize_int64(object array, int64_t n):
    serialize_uint64(array, <uint64_t>n)

cdef object deserialize_int64(char **pointer, char *end):
    return PyLong_FromLongLong(<int64_t>raw_deserialize_uint64(pointer, end))

${this.title(' ', 'sint64')}

cdef inline serialize_sint64(object array, int64_t n):
    cdef uint64_t un = (n<<1) ^ (n>>63)
    serialize_uint64(array, un)

cdef object deserialize_sint64(char **pointer, char *end):
    cdef uint64_t un = raw_deserialize_uint64(pointer, end)
    return PyLong_FromLongLong(<int64_t>((un>>1) ^ (un<<63)))

${this.title(' ', 'fuint32')}

cdef inline serialize_fuint32(object array, uint32_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 4)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    for i from 0 <= i < 4:
        rem = n&((1<<8)-1)
        n=n>>8;
        buff[0] = <char> rem
        buff+=1

cdef object deserialize_fuint32(char **pointer, char *end):
    pass

${this.title(' ', 'fint32')}

cdef inline serialize_fint32(object array, int32_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 4)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    for i from 0 <= i < 4:
        rem = n&((1<<8)-1)
        n=n>>8;
        buff[0] = <char> rem
        buff+=1

cdef object deserialize_fint32(char **pointer, char *end):
    pass

${this.title(' ', 'fuint64')}

cdef inline serialize_fuint64(object array, uint64_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 8)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    for i from 0 <= i < 8:
        rem = n&((1<<8)-1)
        n=n>>8;
        buff[0] = <char> rem
        buff+=1

cdef object deserialize_fuint64(char **pointer, char *end):
    pass

${this.title(' ', 'fint64')}

cdef inline serialize_fint64(object array, int64_t n):
    cdef unsigned short int rem
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 8)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    for i from 0 <= i < 8:
        rem = n&((1<<8)-1)
        n=n>>8;
        buff[0] = <char> rem
        buff+=1

cdef object deserialize_fint64(char **pointer, char *end):
    pass

${this.title(' ', 'bytes')}

cdef inline serialize_bytes(object array, object n):
    cdef Py_ssize_t len = PySequence_Length(n)
    serialize_uint64(array, len)
    cdef object spare = PySequence_InPlaceConcat(array, n)

cdef object deserialize_bytes(char **pointer, char *end):
    pointer[0] = end

${this.title(' ', 'string')}

cdef inline serialize_string(object array, object n):
    serialize_bytes(array, n)

cdef object deserialize_string(char **pointer, char *end):
    cdef object value = PyString_FromStringAndSize(pointer[0], end-pointer[0])
    pointer[0] = end
    return value

${this.title(' ', 'bool')}

cdef inline serialize_bool(object array, bool b):
    cdef Py_ssize_t size = PyByteArray_GET_SIZE(array)
    PyByteArray_Resize(array, size + 1)
    cdef char *buff = PyByteArray_AS_STRING(array) + size

    buff[0] = <char> (b and 1)

cdef object deserialize_bool(char **pointer, char *end):
    pass

${this.title(' ', 'type')}

cdef inline serialize_type(array, unsigned char t, uint32_t n):
    serialize_uint32(array, n<<3|t)

cdef inline uint32_t raw_deserialize_type(char **pointer, char *end):
    return raw_deserialize_uint32(pointer, end)

cdef object deserialize_type(char **pointer, char *end):
    cdef uint32_t value = raw_deserialize_type(pointer, end)
    cdef uint32_t n = value >> 3
    cdef uint32_t t = value & 7
    return (PyInt_FromLong(t), PyInt_FromLong(n))

${this.title(' ', 'float')}

cdef inline serialize_float(array, float f):
    serialize_fuint32(array, (<uint32_t*>&f)[0])

cdef object deserialize_float(char **pointer, char *end):
    pass

${this.title(' ', 'double')}

cdef inline serialize_double(array, double d):
    serialize_fuint64(array, (<uint64_t*>&d)[0])

cdef object deserialize_double(char **pointer, char *end):
    pass

cdef parsefunc __decoder_bytype[6]
__decoder_bytype[0] = deserialize_uint64
__decoder_bytype[1] = deserialize_fuint64
__decoder_bytype[2] = deserialize_bytes
__decoder_bytype[3] = NULL
__decoder_bytype[4] = NULL
__decoder_bytype[5] = deserialize_fuint32

${this.title('_', 'CORE ALGORITHMS')}

% for message in this.messages.itervalues():
${message.render(state)}
% endfor

${this.title('_', 'CLASSES STRUCTURE')}

% for message in this.messages_order:
${this.messages[message].render_structure(state)}
% endfor